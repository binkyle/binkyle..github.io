import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as n,c as l,a as s,b as a,d as e,e as c,f as o}from"./app-1bb01195.js";const d="/assets/1702912662265-2efafaac.png",h="/assets/image-8-85cf80ee.png",A="/assets/1702912974159-17608527.png",C="/assets/image-10-4b8e1116.png",p="/assets/image-9-77f06197.png",N="/assets/image-11-2d3e549d.png",u="/assets/image-12-09cb7bdf.png",_="/assets/image-13-12b4c9c4.png",m="/assets/image-14-195cfe49.png",g={},f=a("p",null,"本文主要讲解Autosar CAN 协议栈原理、集成及相关调试策略",-1),x=o('<h2 id="can通信基本原理" tabindex="-1"><a class="header-anchor" href="#can通信基本原理" aria-hidden="true">#</a> CAN通信基本原理</h2><h3 id="can通信概述" tabindex="-1"><a class="header-anchor" href="#can通信概述" aria-hidden="true">#</a> CAN通信概述</h3><p>CAN（Controller Area Network）即控制器局域网络。由于其高性能、高可靠性、及独 特的设计，CAN越来越受到人们的重视。国外已有许多大公司的产品采用了这一技术。</p><p>CAN最初是由德国的BOSCH公司为汽车监测、控制系统而设计的。现代汽车越来越多地采用电子装置控制，如发动机的定时、注油控制，加速、刹车控制（ASC）及复杂的抗锁定刹车系统（ABS）等。由于这些控制需检测及交换大量数据，采用硬接信号线的方式不但烦琐、昂贵，而且难以解决问题，采用CAN总线上述问题便得到很好地解决。</p><h3 id="can标准及原理图" tabindex="-1"><a class="header-anchor" href="#can标准及原理图" aria-hidden="true">#</a> CAN标准及原理图</h3><p>CAN总线是一种用于在不同的ECU（电子控制单元）之间传输数据的线，CAN总线协议是一种ISO 国际标准化的串行通信协议，有 ISO-11898 和 ISO-11519两个系列。其定义有： ISO-11898 定义了通信速率为 125 kbps ~1Mbps 的高速 CAN 通信标准，属于闭环总线，传输速率可达1Mbps，总线长度 ≤ 40米，如下图。</p><p>ISO11519 定义了通信速率为 10～125 kbps 的低速 CAN 通信标准，属于开环总线，传输速率为40kbps时，总线长度可达1000米，如下图。 <img src="'+d+'" alt="Alt text" loading="lazy"></p><h3 id="can特性" tabindex="-1"><a class="header-anchor" href="#can特性" aria-hidden="true">#</a> CAN特性</h3><ul><li>传输速率最高可达1Mbps，距离最远可达10km</li><li>通信介质选择灵活（双绞线、同轴电缆、光纤）</li><li>采用双线差分信号</li><li>协议本身对节点的数量没有限制</li><li>总线上节点的数量可以动态改变，组网灵活</li><li>短帧结构，传输时间短，受干扰概率低</li><li>多主站结构，各节点平等，任一节点可在任一时刻主动发送</li><li>非破坏性的基于优先级的总线仲裁</li><li>优先级通过报文的标识符（ID）区分，报文标识符在网络中是唯一的 <ol><li>标识符描述了数据的含义</li><li>某些特定的应用对标识符的分配进行了标准化</li></ol></li><li>广播发送报文，报文可以被所有节点同时接收</li><li>根据需要可进行相关性报文过滤 <img src="'+h+'" alt="Alt text" loading="lazy"><img src="'+A+'" alt="Alt text" loading="lazy"></li></ul><h3 id="can功能特性" tabindex="-1"><a class="header-anchor" href="#can功能特性" aria-hidden="true">#</a> CAN功能特性</h3><p>CAN总线上，信号表现为电压形式，通过CAN_H和CAN_L线上的电位差来表示CAN信号，分为显性电平(dominant)和隐性电平(recessive)两种类型。其中显性电平规定为逻辑0，隐性电平则为逻辑1。其具体定义可通过下图来理解。 <img src="'+C+'" alt="Alt text" loading="lazy"></p><h3 id="can系统构成" tabindex="-1"><a class="header-anchor" href="#can系统构成" aria-hidden="true">#</a> CAN系统构成</h3><p>有两种，如下图；第三种是CAN收发器也集成到微控制器中 <img src="'+p+'" alt="Alt text" loading="lazy"></p><h2 id="autosar-can协议栈概述" tabindex="-1"><a class="header-anchor" href="#autosar-can协议栈概述" aria-hidden="true">#</a> AUTOSAR CAN协议栈概述</h2><ul><li>Driver：主要包括CAN的Driver，以及根据外部的CAN的收</li></ul><ul><li>HaedwareAbs：包括用于区分CAN通信的接口，接收／发送不同功能的PDU以及控制CAN收发器进行工作的Transceiver</li></ul><ul><li>Services：包换CAN的状态管理以及PDU和信号的处理相关的模块 <img src="'+N+'" alt="Alt text" loading="lazy"></li></ul><h3 id="can-driver" tabindex="-1"><a class="header-anchor" href="#can-driver" aria-hidden="true">#</a> CAN Driver</h3><ul><li>MCU的CAN外设控制模块</li><li>主要数处理CAN的控制器中的功能，实现 数据在MCU CAN模块的收发 <img src="'+u+'" alt="Alt text" loading="lazy"></li></ul><h4 id="mcal相关配置" tabindex="-1"><a class="header-anchor" href="#mcal相关配置" aria-hidden="true">#</a> MCAL相关配置</h4><ul><li>CanGeneral：配置一些API的使能函数周期等</li><li>CanController：配置MCU的CAN外设操作功能以及CAN的Filter</li><li>CanHaradwareObject：配置CAN的接收发送邮箱以及使用的Filter</li></ul><h3 id="cantrcv" tabindex="-1"><a class="header-anchor" href="#cantrcv" aria-hidden="true">#</a> CANTrcv</h3><p>CAN Trcv模块主要控制CAN外部收发器的模式，MCU的CAN信号与CAN总线建立起数据交互;目标是为适用于大多数当前和未来CAN收发器设备定义接口和行为。CAN Trcv抽象了CAN收发器硬件。它为更高层提供了一个独立于硬件的接口。 它通过使用MCAL层的API来访问CAN收发器硬件，以便实现ECU布局中的抽象化。 <img src="'+_+'" alt="Alt text" loading="lazy"></p><h4 id="cantrcv-模式切换" tabindex="-1"><a class="header-anchor" href="#cantrcv-模式切换" aria-hidden="true">#</a> CANTrcv 模式切换</h4><ul><li>CANTrcv的模式转换主要通过控制Dio或者SPI来控制硬件Trcv</li><li>上电调用Init可以直接切换到任意一个模式</li><li>SetMode函数用于被MainFunction或者CANIf接口调用控制</li><li>在支持唤醒的Trcv一定要确保下电进入Sleep，才能有唤醒功能，这个时候Trcv处于常电模式，且唤醒中断引脚连接SBC的唤醒引脚 <img src="'+m+'" alt="Alt text" loading="lazy"></li></ul><h4 id="mcal配置" tabindex="-1"><a class="header-anchor" href="#mcal配置" aria-hidden="true">#</a> MCAL配置</h4><p>·General：主要配置相关API的使能以及是否支持唤醒等功能 ·ConfigSet：根据外部电路配置Trcv的通道，主要分为DIO控制的和SPI控制的，DIO控制的根据使用的PIN关联到DIO通道，SPI控制的要分配SPI的Sequence</p><h2 id="autosar-can协议栈集成" tabindex="-1"><a class="header-anchor" href="#autosar-can协议栈集成" aria-hidden="true">#</a> AUTOSAR CAN协议栈集成</h2><h2 id="autosar-can调试策略" tabindex="-1"><a class="header-anchor" href="#autosar-can调试策略" aria-hidden="true">#</a> AUTOSAR CAN调试策略</h2><h3 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接" aria-hidden="true">#</a> 参考链接</h3>',30),b={href:"https://www.autosar.org/fileadmin/standards/R20-11/FO/AUTOSAR_TR_FoundationReleaseOverview.pdf",target:"_blank",rel:"noopener noreferrer"},v=a("div",{class:"hint-container tip"},[a("p",{class:"hint-container-title"},"提示"),a("p",null,"若本文对您有用，欢迎送个表情包或评论 ;若有不对之处或建议，欢迎评论")],-1);function S(I,O){const i=t("ExternalLinkIcon");return n(),l("div",null,[f,s(" more "),x,a("p",null,[a("a",b,[e("AUTOSAR_TR_FoundationReleaseOverview"),c(i)]),e(" AUTOSAR中国官方培训课程")]),v])}const M=r(g,[["render",S],["__file","autosar_can_protocol.html.vue"]]);export{M as default};
