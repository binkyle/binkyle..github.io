import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as t,c as a,a as i,b as r,f as n}from"./app-f3fb8442.js";const o="/assets/image-9ad09a1b.png",s="/assets/image-1-b1f3249d.png",l="/assets/image-2-d45a0d2f.png",c="/assets/image-3-954b3e81.png",d="/assets/image-4-4f384f49.png",p="/assets/image-5-ca384339.png",g="/assets/image-6-1f1efd46.png",h="/assets/image-7-f0c203c5.png",f={},_=r("p",null,"本文主要讲解Autosar davinci developer classic基本使用",-1),m=n('<h2 id="_1-介绍" tabindex="-1"><a class="header-anchor" href="#_1-介绍" aria-hidden="true">#</a> 1.介绍</h2><p>为autosar ECU 设计软件组件架构，位于V形流程的Application Software Development; 通过图形视图或文本网格视图，可以设计包括端口、数据在内的软件组件类型、连接器和内部行为。 <img src="'+o+'" alt="Alt text" loading="lazy"></p><h2 id="_2-工作空间-workspace" tabindex="-1"><a class="header-anchor" href="#_2-工作空间-workspace" aria-hidden="true">#</a> 2.工作空间(workspace)</h2><figure><img src="'+s+'" alt="Alt text" tabindex="0" loading="lazy"><figcaption>Alt text</figcaption></figure><figure><img src="'+l+'" alt="Alt text" tabindex="0" loading="lazy"><figcaption>Alt text</figcaption></figure><h2 id="_3-swc-设计" tabindex="-1"><a class="header-anchor" href="#_3-swc-设计" aria-hidden="true">#</a> 3. SWC 设计</h2><figure><img src="'+c+'" alt="Alt text" tabindex="0" loading="lazy"><figcaption>Alt text</figcaption></figure><ol><li>应用组件(Application Components)</li><li>端口、端口初始值和数据元素(Ports, Port Init Values and Data Elements)</li><li>连接(Connections)</li><li>可运行实体(Runnables)</li><li>触发器(Triggers)</li><li>端口访问(Port Access)</li><li>数据映射(Data Mapping)</li></ol><h3 id="_1-创建-application-components" tabindex="-1"><a class="header-anchor" href="#_1-创建-application-components" aria-hidden="true">#</a> 1. 创建 Application Components</h3><p>在 object browser界面有三种视图：Type-oriented、Package-oriented 和 File-oriented <img src="'+d+'" alt="Alt text" loading="lazy"></p><ol><li>在 Type-oriented 视图右键即可创建新Application Component type</li></ol><figure><img src="'+p+'" alt="Alt text" tabindex="0" loading="lazy"><figcaption>Alt text</figcaption></figure><h3 id="_2-理解类型、原型和接口-types-prototypes-and-interfaces" tabindex="-1"><a class="header-anchor" href="#_2-理解类型、原型和接口-types-prototypes-and-interfaces" aria-hidden="true">#</a> 2. 理解类型、原型和接口(Types, Prototypes and Interfaces)</h3><p>在Object Browser中，软件组件是类型，端口是接口。只要你 使用它们，它们就变成了原型</p><ul><li>Port Interface used by a component type -&gt; Port Prototype</li><li>Component Type in Object Browser used in software design view -&gt; Component Prototype</li></ul><figure><img src="'+g+'" alt="Alt text" tabindex="0" loading="lazy"><figcaption>Alt text</figcaption></figure><h3 id="_3-端口、端口初始值和-数据元素-元数据的一个原子数据单元" tabindex="-1"><a class="header-anchor" href="#_3-端口、端口初始值和-数据元素-元数据的一个原子数据单元" aria-hidden="true">#</a> 3. 端口、端口初始值和 数据元素(元数据的一个原子数据单元)</h3><p>在使用应用程序端口之前，必须定义应用程序端口接口。要完全定义端口接口，如果不想使用预定义的数据类型，则必须首先定义数据类型。 端口有以下几个类别</p><ul><li>Sender Ports to provide information</li><li>Receiver Ports to receive information</li><li>Sender/Receiver Ports to provide and receive information within one port</li><li>Server Ports to provide services (operations)</li><li>Client Ports to use services (operations)</li><li>Calibration Ports to hand over calibration parameters</li><li>Mode Ports to e.g. trigger or not trigger runnables within certain modes</li></ul><h3 id="_4-在应用程序组件中配置服务端口" tabindex="-1"><a class="header-anchor" href="#_4-在应用程序组件中配置服务端口" aria-hidden="true">#</a> 4. 在应用程序组件中配置服务端口</h3><h3 id="_5-定义runnables" tabindex="-1"><a class="header-anchor" href="#_5-定义runnables" aria-hidden="true">#</a> 5. 定义runnables</h3><h3 id="_6-为runnable配置触发器、-port-access" tabindex="-1"><a class="header-anchor" href="#_6-为runnable配置触发器、-port-access" aria-hidden="true">#</a> 6. 为runnable配置触发器、 Port Access</h3><h3 id="_7-生成模板" tabindex="-1"><a class="header-anchor" href="#_7-生成模板" aria-hidden="true">#</a> 7. 生成模板</h3><p>如果计划手动实现SWC(而不是使用基于模型的代码生成器)，可以生成SWC模板和合约头文件。 要生成代码，可以在对象浏览器中选择SWC，并通过上下文调用代码生成器菜单</p><figure><img src="'+h+'" alt="Alt text" tabindex="0" loading="lazy"><figcaption>Alt text</figcaption></figure>',25);function u(b,x){return t(),a("div",null,[_,i(" more "),m])}const v=e(f,[["render",u],["__file","userManual.html.vue"]]);export{v as default};
